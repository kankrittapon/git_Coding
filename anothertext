import json
from pathlib import Path
import sys
import os

# ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏≤‡∏ò‡∏Ç‡∏≠‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á sys.path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÑ‡∏î‡πâ
script_dir = Path(__file__).resolve().parent
sys.path.append(str(script_dir))

from live_mode import run_live_mode_for_user
from trial_mode import start_trial_mode as run_trial_mode  # ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ trial mode
from utils import connect_gsheet  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Sheet

# --- ‡∏û‡∏≤‡∏ò‡πÑ‡∏õ‡∏¢‡∏±‡∏á config ‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ ---
USER_CONFIG_PATH = Path("user_config.json")
LINE_USER_CONFIG_PATH = Path("booking_elements/config_line_user.json")
BRANCH_CONFIG_PATH = Path("branch/config.json")
TIME_CONFIG_PATH = Path("branch/time.json")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Role ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ fallback ‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå)
DEFAULT_USER_ROLES = {
    "admin": {
        "max_profiles": 999,
        "can_use_scheduler": True
    },
    "vip2": {
        "max_profiles": 5,
        "can_use_scheduler": True
    },
    "vip1": {
        "max_profiles": 3,
        "can_use_scheduler": True
    },
    "normal": {
        "max_profiles": 1,
        "can_use_scheduler": False
    }
}

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å Google Sheet ---
def load_user_credentials_from_gsheet():
    """
    Loads user credentials and roles from the Google Sheet.
    Returns a list of user credential dictionaries.
    """
    try:
        print("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏à‡∏≤‡∏Å Google Sheet...")
        sheet = connect_gsheet()  # ‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î credentials.json ‡∏ú‡πà‡∏≤‡∏ô API ‡πÉ‡∏ô utils.py
        user_sheet = sheet.worksheet("Users")  # ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        all_records = user_sheet.get_all_records()  # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö dictionary list

        user_credentials = []
        for record in all_records:
            username = record.get("Username")
            password = record.get("Password")
            role = record.get("Role")

            if username and password and role:
                max_profiles_from_sheet = record.get("Max Profiles")
                can_use_scheduler_from_sheet = record.get("Can Use Scheduler")

                effective_max_profiles = DEFAULT_USER_ROLES.get(role, {}).get("max_profiles", 1)
                if max_profiles_from_sheet is not None:
                    try:
                        effective_max_profiles = int(max_profiles_from_sheet)
                    except ValueError:
                        print(f"‚ö†Ô∏è Warning: 'Max Profiles' for {username} is not a valid number. Using default for role '{role}'.")

                effective_can_use_scheduler = DEFAULT_USER_ROLES.get(role, {}).get("can_use_scheduler", False)
                if can_use_scheduler_from_sheet is not None:
                    effective_can_use_scheduler = str(can_use_scheduler_from_sheet).strip().upper() == "TRUE"

                user_credentials.append({
                    "username": username,
                    "password": password,
                    "role": role,
                    "max_profiles": effective_max_profiles,
                    "can_use_scheduler": effective_can_use_scheduler
                })
            else:
                print(f"‚ö†Ô∏è Warning: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏ô Google Sheet (Username: {username}, Role: {role}). ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ.")

        print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ {len(user_credentials)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å Google Sheet ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß.")
        return user_credentials

    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Sheet: {e}")
        return []

def authenticate_user(username, password, gsheet_users_data):
    """
    Authenticates a user against data loaded from Google Sheet.
    Returns (user_data_dict) on success, or None on failure.
    The user_data_dict will contain 'username', 'role', 'max_profiles', 'can_use_scheduler'.
    """
    for user_cred in gsheet_users_data:
        if user_cred.get("username") == username and user_cred.get("password") == password:
            return user_cred  # Return the full user data dict
    return None

def load_json_config(path):
    """Helper to load JSON config safely."""
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except FileNotFoundError:
        print(f"‚ùå Config file not found: {path}")
        return {}
    except json.JSONDecodeError:
        print(f"‚ùå Invalid JSON in config file: {path}")
        return {}
    except Exception as e:
        print(f"‚ùå Could not load config file {path}: {e}")
        return {}

def get_available_profiles(username, all_user_profiles_from_config):
    """Filters profiles from user_config.json for a given username."""
    user_profiles = [u for u in all_user_profiles_from_config.get("users", []) if u["username"] == username]
    return user_profiles

def load_line_credentials(username, profile_name, all_line_accounts):
    """
    Loads LINE email and password from loaded line accounts data.
    """
    for account in all_line_accounts:
        if account["username"] == username and account["profile_name"] == profile_name:
            print(f"‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{username}' ({profile_name}) ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß.")
            return account.get("line_email"), account.get("line_password")

    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• LINE Login ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{username}' ({profile_name}).")
    return None, None

def run_cli_mode(all_configs, gsheet_users_data):
    """
    Runs the command-line interface mode.
    """
    print("\n--- ‡πÇ‡∏´‡∏°‡∏î CLI ---")
    username = input("Username: ").strip()
    password = input("Password: ").strip()

    user_auth_data = authenticate_user(username, password, gsheet_users_data)

    if user_auth_data:
        print(f"‚úÖ Welcome, {username}! (Role: {user_auth_data['role']})")

        # Filter profiles based on logged in user's username and max_profiles
        available_profiles_for_user = get_available_profiles(username, all_configs['user_profiles'])
        if user_auth_data['role'] != 'admin' and len(available_profiles_for_user) > user_auth_data['max_profiles']:
            available_profiles_for_user = available_profiles_for_user[:user_auth_data['max_profiles']]
            print(f"‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {user_auth_data['max_profiles']} ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå.")

        if not available_profiles_for_user:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Username ‡∏ô‡∏µ‡πâ‡πÉ‡∏ô user_config.json")
            return

        print("\nüìã ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:")
        for i, u in enumerate(available_profiles_for_user):
            print(f"{i+1}. {u['browser']} - {u['profile_name']}")

        try:
            choice = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ: "))
            selected_profile_obj = available_profiles_for_user[choice - 1]
            browser = selected_profile_obj['browser']
            profile_name = selected_profile_obj['profile_name']

            line_email, line_password = load_line_credentials(username, profile_name, all_configs['line_accounts'])

            # --- CLI specific prompts for booking details ---
            branches = all_configs['branches']
            if not branches:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏î‡πâ")
                return
            print("\nüè¢ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ (Branch):")
            for i, b in enumerate(branches):
                print(f"{i+1}. {b}")
            while True:
                try:
                    branch_choice = int(input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏≤‡∏Ç‡∏≤: "))
                    if 1 <= branch_choice <= len(branches):
                        branch = branches[branch_choice - 1]
                        break
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

            while True:
                try:
                    day = int(input("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô (1-31): "))
                    if 1 <= day <= 31:
                        break
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

            times = all_configs['times']
            if not times:
                print("‚ùå ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                return None
            print("\n‚è∞ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ:")
            for i, t in enumerate(times, 1):
                print(f"{i}. {t}")
            while True:
                try:
                    time_choice = int(input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤: "))
                    if 1 <= time_choice <= len(times):
                        time_index = time_choice - 1  # Convert to 0-based index
                        break
                    else:
                        print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
                except ValueError:
                    print("‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç")

            # Call run_live_mode_for_user to start the booking process
            run_live_mode_for_user(username, browser, profile_name, branch, day, time_index, line_email, line_password)

        except (IndexError, ValueError):
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        except Exception as e:
            print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")

    else:
        print("‚ùå Username ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á.")

def start():
    # Load all necessary configs at the start
    all_configs = {
        'user_profiles': load_json_config(USER_CONFIG_PATH),
        'line_accounts': load_json_config(LINE_USER_CONFIG_PATH).get("line_accounts", []),
        'branches': load_json_config(BRANCH_CONFIG_PATH),
        'times': load_json_config(TIME_CONFIG_PATH),
    }
    gsheet_users_data = load_user_credentials_from_gsheet()  # Load user credentials from GSheet

    if not gsheet_users_data:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Google Sheet ‡πÑ‡∏î‡πâ. ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ.")
        return

    # Check if a specific mode is requested via command line arguments
    # python main.py --gui or python main.py --cli
    mode_arg = sys.argv[1] if len(sys.argv) > 1 else ""

    if mode_arg == "--gui":
        print("Starting GUI mode...")
        # Import gui_app here to avoid circular imports if gui_app imports main
        from gui_app import run_gui_app  # Assuming run_gui_app is a function in gui_app.py that starts the Tkinter loop
        run_gui_app(all_configs, gsheet_users_data)
    else:  # Default to CLI mode if no --gui arg or other unrecognized arg
        run_cli_mode(all_configs, gsheet_users_data)


if __name__ == "__main__":
    start()
