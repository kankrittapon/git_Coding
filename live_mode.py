import json
from pathlib import Path
from playwright.sync_api import sync_playwright
import shutil

def load_config(path='user_config.json'):
    with open(path, 'r', encoding='utf-8') as f:
        return json.load(f)

def get_user_data_dir_and_executable(username, browser, profile_name):
    # Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
    if browser == 'chrome':
        base_chrome_user_data_dir = Path(f"C:/Users/{username}/AppData/Local/Google/Chrome/User Data")
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß ‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏á‡πà‡∏≤‡∏¢‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        temp_user_data_dir = Path(f"./playwright_chrome_user_data_{profile_name}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        source_profile_path = base_chrome_user_data_dir / profile_name
        if not source_profile_path.is_dir():
            raise ValueError(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå Chrome '{profile_name}' ‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏ò: {source_profile_path}")
        
        # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
        if temp_user_data_dir.exists():
            shutil.rmtree(temp_user_data_dir)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏Å‡πà‡∏≤: {temp_user_data_dir}")

        # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        shutil.copytree(source_profile_path, temp_user_data_dir)
        print(f"üìÇ ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå '{profile_name}' ‡πÑ‡∏õ‡∏¢‡∏±‡∏á: {temp_user_data_dir}")

        executable = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
        return str(temp_user_data_dir), executable

    # Logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Edge: ‡πÉ‡∏ä‡πâ‡∏û‡∏≤‡∏ò‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    elif browser == 'edge':
        base = Path(f"C:/Users/{username}/AppData/Local/Microsoft/Edge/User Data/{profile_name}")
        executable = r"C:\Program Files (x86)\Microsoft\Edge\Application\msedge.exe"
        return str(base), executable
    else:
        raise ValueError("Browser ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô chrome ‡∏´‡∏£‡∏∑‡∏≠ edge")

def run_browser_for_user(user_config):
    username = user_config['username']
    browser_name = user_config['browser'].lower()
    profile_name = user_config.get('profile_name', 'Default')

    user_data_dir, executable_path = get_user_data_dir_and_executable(username, browser_name, profile_name)

    # ‡πÉ‡∏ä‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å try...finally ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏™‡∏°‡∏≠
    try:
        with sync_playwright() as p:
            args_list = [
                "--disable-blink-features=AutomationControlled",
                "--no-first-run",
                "--no-default-browser-check"
            ]
            
            browser_context = p.chromium.launch_persistent_context(
                user_data_dir=user_data_dir,
                executable_path=executable_path,
                headless=False,
                args=args_list,
            )

            # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏ö‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤
            if len(browser_context.pages) > 0:
                page = browser_context.pages[0]
                try:
                    page.wait_for_load_state("domcontentloaded", timeout=5000)
                except Exception:
                    print("‚ö†Ô∏è ‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏ó‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤, ‡∏•‡∏≠‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
                    pass
            else:
                page = browser_context.new_page()

            page.goto("https://popmartth.rocket-booking.app/booking")
            page.wait_for_load_state("networkidle")
            print(f"‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î browser ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {username} ({browser_name}, ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå: {profile_name}) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
            input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î browser ...")
            browser_context.close()

    finally:
        # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Chrome ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏±‡πâ‡∏ô‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if browser_name == 'chrome' and Path(user_data_dir).exists():
            shutil.rmtree(user_data_dir)
            print(f"üóëÔ∏è ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß: {user_data_dir}")

def run_live_mode_for_user(username, browser, profile_name):
    config = load_config()
    users = config.get('users', [])
    matched_users = [
        u for u in users if u['username'] == username and u['browser'] == browser and u['profile_name'] == profile_name
    ]

    if not matched_users:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö config ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
        return

    run_browser_for_user(matched_users[0])